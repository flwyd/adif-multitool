// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package adif

import (
	"fmt"
	"strings"
)

const (
	// FormatADI is a Format of type ADI.
	FormatADI Format = "ADI"
	// FormatADX is a Format of type ADX.
	FormatADX Format = "ADX"
	// FormatCSV is a Format of type CSV.
	FormatCSV Format = "CSV"
	// FormatJSON is a Format of type JSON.
	FormatJSON Format = "JSON"
)

var ErrInvalidFormat = fmt.Errorf("not a valid Format, try [%s]", strings.Join(_FormatNames, ", "))

var _FormatNames = []string{
	string(FormatADI),
	string(FormatADX),
	string(FormatCSV),
	string(FormatJSON),
}

// FormatNames returns a list of possible string values of Format.
func FormatNames() []string {
	tmp := make([]string, len(_FormatNames))
	copy(tmp, _FormatNames)
	return tmp
}

// String implements the Stringer interface.
func (x Format) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Format) IsValid() bool {
	_, err := ParseFormat(string(x))
	return err == nil
}

var _FormatValue = map[string]Format{
	"ADI":  FormatADI,
	"adi":  FormatADI,
	"ADX":  FormatADX,
	"adx":  FormatADX,
	"CSV":  FormatCSV,
	"csv":  FormatCSV,
	"JSON": FormatJSON,
	"json": FormatJSON,
}

// ParseFormat attempts to convert a string to a Format.
func ParseFormat(name string) (Format, error) {
	if x, ok := _FormatValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _FormatValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Format(""), fmt.Errorf("%s is %w", name, ErrInvalidFormat)
}

// Set implements the Golang flag.Value interface func.
func (x *Format) Set(val string) error {
	v, err := ParseFormat(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Format) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Format) Type() string {
	return "Format"
}
